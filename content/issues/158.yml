time: "Jun 29, 2020"
subject: "Learning operating system development using Linux kernel and Raspberry Pi"
draft: false

description: |
  Hi everyone, Welcome to issue #158. If you like this newsletter, please help forward this email to a friend, tweet, or shout from a rooftop. It goes a long way :-).

links:
  - url: https://s-matyukevich.github.io/raspberry-pi-os/
    title: "Learning operating system development using Linux kernel and Raspberry Pi"
    description: |
      This repository contains a step-by-step guide that teaches how to create a simple operating system (OS) kernel from scratch. I call this OS Raspberry Pi OS or just RPi OS. The RPi OS source code is largely based on Linux kernel, but the OS has very limited functionality and supports only Raspberry PI 3.
      If you are into this, check [Notes on "The Design of the UNIX Operating System"](https://github.com/suvratapte/Maurice-Bach-Notes/blob/master/README.md) as well.

#https://www.arm.com/resources/education/books/operating-systems
#
  - url: https://www.2ndquadrant.com/en/blog/10-things-postgres-could-improve-part-1/
    title: "10 Things Postgres Could Improve – Part 1"
    description: |
      Release after release we keep hearing about the good part of Postgres, but what is the bad parts? Knowing the bad parts help a lot otherwise you only know about it when you already get into that situation.
      [Part 2](https://www.2ndquadrant.com/en/blog/pg-phriday-10-things-postgres-could-improve-part-2/) is release as well.

  - url: https://wiki.mozilla.org/Performance/Avoid_SQLite_In_Your_Next_Firefox_Feature#VERY_OLD_DOCUMENT
    title: "Performance/Avoid SQLite In Your Next Firefox Feature"
    description: |
      This is an 2014 document of FireFox project to advise their engineer to avoid SQLite, they explain the downside of SQLite at that time, which may not right in 2020.
      However, I found many things still ring true such as the IO pattern. I recently have to debug a small SQLite database with heavy disk IO due to its fsync in default rollback-journal mode

  - url: https://fasterthanli.me/series/reading-files-the-hard-way
    title: "Reading files the hard way"
    description: "But what is a file, really? And what does reading a file entail, exactly? See how it's done in Node, C, Rust, Strace, x86 asm, look to disk layouts, ext4"

  - url: https://blog.packagecloud.io/eng/2016/04/05/the-definitive-guide-to-linux-system-calls/
    title: "The Definitive Guide to Linux System Calls"
    description: "
      If you ever use `chown`, `chmod`, or even doing any file read, or `mkdir`, you are making system calls. System calls are how a progrm enters the kernel to perform some tasks.
      This guide teachs us User programs, the kernel, and CPU privilege levels, Interrupts(kind of like event that is generated by hardware or software), then how we can craft system calls using assembly.
      A very low-level guide but I found it's very helpful and easy to follow to know more about our computer."

  - url: https://stackshare.io/stack-history-timeline-slack-tech-stack-evolution
    title: "A Timeline of Slack's Tech Stack Evolution"
    description: |
      Lots of interesting info on Slack tech stack: from their languages, cloud provider, how they monitor performance, logging and track security. Basically a summarize of their evolutions and many links to each section: search index, monitoring with Icinga, Grafana, Sharding database with Vitess.

  - url: https://www.cs.ru.nl/bachelors-theses/2020/Joren_Vrancken___4593847___A_Methodology_for_Penetration_Testing_Docker_Systems.pdf
    title: "A Methodology for Penetration Testing Docker Systems(PDF)"
    description: |
      A 81 pages research discusses Docker from a security perspective and looks at how a penetration tester should assess the security of systems that use Docker. Docker internal, data persistences, networking, docker socket, protection mechanisms, attack vector.

  - url: https://aws.amazon.com/builders-library/leader-election-in-distributed-systems/?did=ba_card&trk=ba_card
    title: "Leader Election in Distributed Systems"
    description: "Leader election is the simple idea of giving one thing (a process, host, thread, object, or human) in a distributed system some special powers. This post is in AWS Builder's Library on How Amazon elects a leader.
      What they do when that process failed."

  - url: https://jepsen.io/analyses/redis-raft-1b3fbf6
    title: "Jepsen analysis of Redis Raft 1b3fbf6"
    description: |
      Jepsen analyses distributed systems and report their finding. This one focus on Raft implement of Redis.
      The conclustion is this: users who want fault-tolerance and not lost updates need something stronger than existing Redis replication systems.
      They found data loss on failover, split-brand and lost updates, Stale Reads in Healthy Clusters...

  - url: https://blog.jetbrains.com/teamcity/2020/06/teamcity-ui-how-do-we-test-it/
    title: "TeamCity UI: how do we test it"
    description: |
      front-end testing, or end to end testing or UI testing is the most expensive test, but they are the one that give you the most confident because it's what your end user see, not testing a particular code and skip certain thing, UI test tend to run through whole stack. In this article, we will provide an overview of UI testing used in TeamCity for their React app.

  - url: https://siipo.la/blog/is-webp-really-better-than-jpeg
    title: "Is WebP really better than JPEG?"
#https://teachyourselfcs.com/
#  - url: https://vldb.org/pvldb/vldb2010/pvldb_vol3/TY02.pdf
#    title: "Database Replication:
#      a Tale of Research across Communities"
#
#
#  - url: https://www.vidarholen.net/contents/blog/?p=878
#    title: "
#
#  - url: https://medium.com/@github.gkarthiks/how-does-packet-filtering-and-iptables-work-321ccc56fb40
#    title: "How does Packet filtering and IPTables work?
#    Understanding the basics of IP Packet Filtering "
#
#  https://opensource.com/article/20/6/linux-noatime
#
#http://web.eecs.utk.edu/~azh/blog/teenytinycompiler1.html
#
#  - url: https://github.com/EmilHernvall/dnsguide
#    title: "A guide to writing a DNS Server from scratch in Rust"
#    description: |
#      Writing DNS server is like hello world for networking to me. DNS is small enough, not massive like HTTP, also relying on UDP, so I think it's a good exercise to learn UDP, DNS protocol.
#      This artcile is focus on Rust, and I'm not a Rust programmer, only toy with Rust and I was able to follow it.
#  - url: https://medium.com/@Zack.Grannan/the-epic-migration-of-spotify-to-google-cloud-platform-92372ae2d552
#    title: "Spotify’s Cloud Migration: 100+ Teams, 1200 Services, 20k Data Jobs"
#
# - url: https://fzakaria.com/2020/05/31/containers-from-first-principles.html
#
#  - url: https://csswizardry.com/2020/05/the-fastest-google-fonts/
#    title: "The Fastest Google Fonts"
#
#    https://www.gutenberg.org/files/30688/30688-h/30688-h.htm
#
#    https://thorsten-hans.com/5-types-of-zsh-aliases#operating-system-specific-aliases
# https://github.com/LisaDziuba/Marketing-for-Engineers
#https://pragmaticwebsecurity.com/articles/oauthoidc/from-implicit-to-pkce.html

video:
  - url: https://www.platformsecuritysummit.com/2019/speaker/chen/
    title: "Guarding Against Physical Attacks: The Xbox One Story"

  - url: https://www.youtube.com/watch?v=xrMbzHdPLKM
    title: "Tuning PostgreSQL for High Write Workloads"
    description: |
      Old talks in 2017, target Postgrres 9.6 but still have lot of useful information.

  - url: https://www.youtube.com/watch?v=fGG9dApIhDU
    title: "Introducing ClickHouse -- The Fastest Data Warehouse You've Never Heard Of (Robert Hodges, Altinity)"
    description: |
      Sounds like clickbait title but ClickHouse is indeed fast. Sentry also use it for their event data, despire some its drawback such as hard to delete data.

read_code:
  - url: https://github.com/rethab/awk-jvm
    title: "awk-jvm"
    description: |
      a toy jvm in awk, based on this tutorial: https://zserge.com/posts/jvm/
    category: ['Java', 'awk']

  # url: https://github.com/erikgrinaker/toydb
  # title: toydb
  # category: ['Rust']

  - url: https://github.com/sekey/sekey
    title: sekey
    description: |
      a SSH Agent that allow users to authenticate to UNIX/Linux SSH servers using the Secure Enclave
    category: ['Rust']

  - url: https://github.com/dryruby/ebnf
    title: ebnf
    description: |
      a Ruby implementation of an EBNF and BNF parser and parser generator.
    category: ['Ruby']

  - url: https://github.com/bryanbraun/checkboxland
    title: checkboxland
    description: "a JavaScript library for rendering anything as HTML checkboxes. It's very impressive, you can even run snake game as check box. An interesting code base to read for its techniques."
    category: ['JavaScript']

  - url: https://github.com/Akatsuki-py/Worldwide
    title: Worldwide
    description: |
      GameBoyColor emulator written in golang.
    category: ['Go']

tool:
  - url: https://bucardo.org/check_postgres/check_postgres.pl.html
    title: check_postgres.pl
    description: |
      a Postgres monitoring script for Nagios, MRTG, Cacti, and others

  - url: https://github.com/sqlitebrowser/sqlitebrowser
    title: sqlitebrowser
    description: |
      a high quality, visual, open source tool to create, design, and edit database files compatible with SQLite.

  - url: https://github.com/maxgoedjen/straw
    title: "straw"
    description: "Live iOS Notifications in the Simulator"

  - url: https://github.com/maxgoedjen/secretive
    title: secretive
    description: "an app for storing and managing SSH keys in the Secure Enclave."

#  - url: https://datasette.readthedocs.io/en/stable/
#title: datasette
#- url: https://github.com/qoomon/docker-host
#  title: docker-host

  - url: https://pgbackrest.org/index.html
    title: pgbackrest
    description: |
      a simple, reliable backup and restore solution that can seamlessly scale up to the largest databases and workloads by utilizing algorithms that are optimized for database-specific requirements

  - url: https://github.com/hjacobs/kube-janitor
    title: kube-janitor
    description: |
      cleans up (deletes) Kubernetes resources on (1) a configured TTL (time to live) or (2) a configured expiry date (absolute timestamp).

  - url: https://github.com/timvisee/ffsend
    title: ffsend
    description: |
      Firefox send cli client. Quickly share file up to 1GB right from terminal anonymously.

